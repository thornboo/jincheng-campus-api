// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id                String          @id @default(cuid())
  username          String          @unique
  email             String?         @unique
  phone             String?         @unique
  password          String
  nickname          String?
  avatar            String?
  level             Int             @default(1)
  signature         String?
  status            UserStatus      @default(ACTIVE)
  lastLoginAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // 关联关系
  lostFounds        LostFound[]
  idleTrades        IdleTrade[]
  partTimeJobs      PartTimeJob[]
  campusErrands     CampusErrand[]
  comments          Comment[]
  favorites         Favorite[]
  
  // 聊天相关
  chatSessions1     ChatSession[]   @relation("ChatParticipant1")
  chatSessions2     ChatSession[]   @relation("ChatParticipant2")
  sentChatMessages  ChatMessage[]   @relation("SentChatMessages")
  systemMessages    SystemMessage[] @relation("SystemMessages")

  @@map("users")
}

// 失物招领
model LostFound {
  id           String           @id @default(cuid())
  userId       String
  title        String
  content      String           @db.Text
  category     String?
  location     String?
  images       Json?            // 存储图片URL数组
  type         LostFoundType    @default(LOST)
  status       PostStatus       @default(ACTIVE)
  viewCount    Int              @default(0)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments     Comment[]
  favorites    Favorite[]

  @@map("lost_founds")
}

// 闲置交易
model IdleTrade {
  id              String      @id @default(cuid())
  userId          String
  title           String
  description     String      @db.Text
  price           Decimal     @db.Decimal(10, 2)
  category        String?
  conditionDesc   String?
  images          Json?       // 存储图片URL数组
  status          PostStatus  @default(ACTIVE)
  viewCount       Int         @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments        Comment[]
  favorites       Favorite[]

  @@map("idle_trades")
}

// 兼职信息
model PartTimeJob {
  id           String      @id @default(cuid())
  userId       String
  title        String
  description  String      @db.Text
  salaryType   SalaryType  @default(HOURLY)
  salaryAmount Decimal     @db.Decimal(10, 2)
  workTime     String?
  location     String?
  requirements String?     @db.Text
  contactInfo  String?
  status       PostStatus  @default(ACTIVE)
  viewCount    Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments     Comment[]
  favorites    Favorite[]

  @@map("part_time_jobs")
}

// 校园跑腿
model CampusErrand {
  id               String      @id @default(cuid())
  userId           String
  title            String
  description      String      @db.Text
  pickupLocation   String
  deliveryLocation String
  reward           Decimal     @db.Decimal(10, 2)
  deadline         DateTime?
  status           PostStatus  @default(ACTIVE)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments         Comment[]
  favorites        Favorite[]

  @@map("campus_errands")
}

// 评论系统
model Comment {
  id           String           @id @default(cuid())
  userId       String
  targetType   CommentTarget
  targetId     String
  content      String           @db.Text
  parentId     String?
  status       CommentStatus    @default(ACTIVE)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent       Comment?         @relation("CommentReplies", fields: [parentId], references: [id])
  replies      Comment[]        @relation("CommentReplies")
  
  // 多态关联
  lostFound    LostFound?       @relation(fields: [targetId], references: [id], onDelete: Cascade)
  idleTrade    IdleTrade?       @relation(fields: [targetId], references: [id], onDelete: Cascade)
  partTimeJob  PartTimeJob?     @relation(fields: [targetId], references: [id], onDelete: Cascade)
  campusErrand CampusErrand?    @relation(fields: [targetId], references: [id], onDelete: Cascade)

  @@map("comments")
}

// 收藏系统
model Favorite {
  id           String        @id @default(cuid())
  userId       String
  targetType   FavoriteTarget
  targetId     String
  createdAt    DateTime      @default(now())
  
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 多态关联
  lostFound    LostFound?    @relation(fields: [targetId], references: [id], onDelete: Cascade)
  idleTrade    IdleTrade?    @relation(fields: [targetId], references: [id], onDelete: Cascade)
  partTimeJob  PartTimeJob?  @relation(fields: [targetId], references: [id], onDelete: Cascade)
  campusErrand CampusErrand? @relation(fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([userId, targetType, targetId])
  @@map("favorites")
}

// 聊天会话
model ChatSession {
  id          String     @id @default(cuid())
  participant1Id String
  participant2Id String
  lastMessageId String?
  lastActiveAt DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  participant1 User      @relation("ChatParticipant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2 User      @relation("ChatParticipant2", fields: [participant2Id], references: [id], onDelete: Cascade)
  messages     ChatMessage[]
  
  @@unique([participant1Id, participant2Id])
  @@map("chat_sessions")
}

// 聊天消息
model ChatMessage {
  id          String      @id @default(cuid())
  sessionId   String
  senderId    String
  content     String      @db.Text
  messageType MessageType @default(TEXT)
  isRead      Boolean     @default(false)
  createdAt   DateTime    @default(now())
  
  session     ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sender      User        @relation("SentChatMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// 系统消息/通知
model SystemMessage {
  id         String        @id @default(cuid())
  userId     String
  title      String
  content    String        @db.Text
  type       SystemMessageType @default(SYSTEM)
  isRead     Boolean       @default(false)
  createdAt  DateTime      @default(now())
  
  user       User          @relation("SystemMessages", fields: [userId], references: [id], onDelete: Cascade)

  @@map("system_messages")
}

// 轮播图管理
model Banner {
  id        String       @id @default(cuid())
  title     String
  imageUrl  String
  linkUrl   String?
  sortOrder Int          @default(0)
  status    BannerStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("banners")
}

// 枚举定义
enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum LostFoundType {
  LOST     // 丢失
  FOUND    // 拾得
}

enum PostStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum SalaryType {
  HOURLY   // 时薪
  DAILY    // 日薪
  MONTHLY  // 月薪
  PIECE    // 计件
}

enum CommentTarget {
  LOST_FOUND
  IDLE_TRADE
  PART_TIME_JOB
  CAMPUS_ERRAND
}

enum CommentStatus {
  ACTIVE
  HIDDEN
  DELETED
}

enum FavoriteTarget {
  LOST_FOUND
  IDLE_TRADE
  PART_TIME_JOB
  CAMPUS_ERRAND
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

enum SystemMessageType {
  SYSTEM
  NOTIFICATION
  ANNOUNCEMENT
}

enum BannerStatus {
  ACTIVE
  INACTIVE
}
